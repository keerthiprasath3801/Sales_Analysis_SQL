Select * From [dbo].[fact];
Select * From [dbo].[Location];
Select * From[dbo].[Product];
--1. Display the number of states present in the LocationTab
Select Count(*)State From Location;
--2. How many products are regular type
SELECT Type, COUNT(*) AS TotalCount
FROM Product
WHERE Type = 'Regular'
GROUP BY Type;
--3. How much spending has been done on marketing of product ID 1?
Select Sum(Total_Expenses) as spending_amount
From fact
Where ProductId=1
Group by ProductId;
--4. What is the minimum sales of a product
Select * From fact;
Select * From Product;
SELECT p.ProductId, p.Product, MIN(f.Sales) AS Minimum_Sales
FROM Product AS p
LEFT JOIN fact AS f ON p.ProductId = f.ProductId
GROUP BY p.ProductId, p.Product;
--5. Display the max Cost of Good Sold (COGS).
SELECT MAX(COGS) AS MaxCOGS
FROM fact;
--6.Display the details of the product where product type
Select * FROM Product;
SELECT * FROM Product WHERE Product_Type='Coffee';
--7.Display the details where total expenses are greater than > 40
SELECT * FROM fact;
Select * FROM fact Where Total_Expenses >40;
--8.What is the average sales in area code 719
Select * FROM fact;
Select AVG(Sales) as Average_Sales From fact Where Area_Code=719;
--9.Find out the total profit generated by Colorado state
Select * From Location;
--Area_Code=303
Select Sum(Profit) as Total_profit From fact Where Area_Code=303;
--10. Display the average inventory for each product
Select * FROM Product;
SELECT AVG(f.Inventory) AS AverageInventory,
 P.ProductId,
 P.Product_Type
FROM Fact AS f
LEFT JOIN Product AS P ON f.ProductId = P.ProductId
GROUP BY P.ProductId, P.Product_Type Order BY P.ProductId ;
--11. Display state in a sequential order in a Location
SELECT *
FROM Location
ORDER BY State;
Select * FROM Product;
--12.12. Display the average budget of the Product where the average budget
--margin should be greater than 100.
Select * FROM fact;
SELECT AVG(f.Budget_Margin) AS Average_Budget_Margin,
 P.Product_Type
FROM fact AS f
LEFT JOIN Product AS P ON f.ProductId = P.ProductId
GROUP BY P.Product_Type
Having AVG(f.Budget_Margin) >100;
--13. What is the total sales done on date 2010-01-01?
SELECT SUM(Sales) AS TotalSales
FROM Fact
WHERE Date = '2010-01-01';
--14.Display the average total expense of each product ID on an each date
Select * From fact
SELECT Date,
 ProductID,
 AVG(Total_Expenses)AS AverageTotalExpenses
FROM Fact
GROUP BY Date, ProductID Order By AVG(Total_Expenses) asc;
--15.Display the table with the following attributes such as date, productID, 
product_type, product, sales, profit, state, area_code
Select * FROM fact;
SELECT Date,
 P.Product_Type,
 P.Product,
 Sales,
 Profit,
 State,
 f.Area_Code,
 f.ProductId
FROM fact as f
Left Join Location as L ON f.Area_Code=L.Area_Code
Left JOIn Product as P ON f.ProductId = P.ProductId;
--16.Display the rank without any gap to show the sales wise rank.
SELECT Sales,
 DENSE_RANK() OVER (ORDER BY Sales) AS my_dense_rank
FROM fact;
Select * FROM Location
--17.Find the state wise profit 
SELECT State,
 SUM(Sales) AS TotalSales,
 SUM(Profit) AS TotalProfit
FROM fact as f
Left JOIN Location as L ON f.Area_Code=L.Area_Code
GROUP BY State;
--18.Find the state wise profit and sales along with the productname.
SELECT L.State,
 P.Product,
 F.Profit,
 F.Sales
FROM fact AS F
JOIN Product AS P ON F.ProductID = P.ProductID
JOIN Location AS L ON F.Area_Code = L.Area_Code;
--19. If there is an increase in sales of 5%, calculate the increased sales
Select * FROM Product
SELECT * FROM fact
SELECT (Sales + Sales * 0.05) AS IncreasedSales
FROM fact;
--20. Find the maximum profit along with the product ID and producttype.
Select * From fact
SELECT MAX(f.Profit) AS Maximum_Profit,
 P.Product_Type,
 P.ProductId
FROM fact AS f
LEFT JOIN Product AS P ON f.ProductId = P.ProductId
GROUP BY P.Product_Type, P.ProductId Order By P.Product_Type;
--21.Create a stored procedure to fetch the result according to the product type
CREATE PROCEDURE GetProductsByType
AS
BEGIN
 SELECT ProductID, Product_Type, Product
 FROM Product;
END;
EXEC GetProductsByType
--22.Write a query by creating a condition in which if the total expenses is less than
--60 then it is a profit or else loss
SELECT Total_Expenses,
 Profit,
 CASE
 WHEN Total_Expenses < 60 THEN 'Profit'
 ELSE 'Loss'
 END AS Profit_or_Loss
FROM fact;
--23.. Give the total weekly sales value with the date and product ID details. Use
--roll-up to pull the data in hierarchical order
SELECT
 DATEPART(WEEK, Date) AS WeekNumber,
 Date,
 ProductID,
 SUM(Sales) AS WeeklySales
FROM fact
GROUP BY ROLLUP (DATEPART(WEEK, Date), Date, ProductID)
ORDER BY WeekNumber, Date, ProductID;
--24.. Apply union and intersection operator on the tables which consist of
--attribute area code.
SELECT Area_Code FROM fact
Union
SELECT Area_Code FROM Location;
--25.. Create a user-defined function for the product table to fetch a particular
--product type based upon the userâ€™s preference
CREATE FUNCTION dbo.GetProductByType
(
 @UserProductType NVARCHAR(50)
)
RETURNS TABLE
AS
RETURN
(
 SELECT ProductID, Product
 FROM Product
 WHERE Product_Type = @UserProductType
);
EXEC dbo.GetProductsByType
--26.Change the product type from coffee to tea where product ID is 1 and undo
--it.
DECLARE @i INT = 1;
WHILE @i <= 10
BEGIN
 PRINT 'Current value of i: ' + CAST(@i AS NVARCHAR(10));
 -- Perform other actions or calculations here
 SET @i = @i + 1;
END;
--27.Display the date, product ID and sales where total expenses are
--between 100 to 200
Select Date,ProductId,Sales,Total_Expenses FROM fact Where Total_Expenses Between 100 
and 200;
--28. Delete the records in the Product Table for regular type.
Select * from fact;
Select * from Product;
DELETE FROM Product
WHERE Product_Type = 'regular';
